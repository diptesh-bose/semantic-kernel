{
  "version": "2.0.0",
  "tasks": [
    {
      "label": "setup (contributing-R#)",
      "detail": "",
      "group": "build",
      "dependsOn": [
        "new tool-manifest",
        "# Setup"
      ],
      "dependsOrder": "sequence"
    },
    {
      "label": "new tool-manifest",
      "detail": "Install ReSharper Global Tools",
      "command": "dotnet",
      "type": "process",
      "args": [
        "new",
        "tool-manifest"
      ],
      "options": {
        "cwd": "${workspaceFolder}/dotnet"
      }
    },
    {
      "label": "R# Setup",
      "detail": "Install ReSharper Global Tools",
      "command": "dotnet",
      "type": "process",
      "args": [
        "tool",
        "install",
        "JetBrains.ReSharper.GlobalTools",
        "--global"
      ],
      "options": {
        "cwd": "${workspaceFolder}/dotnet"
      }
    },
    {
      "label": "format-check (contributing-R#)",
      "command": "dotnet",
      "type": "process",
      "group": "build",
      "args": [
        "jb",
        "inspectcode",
        "--output=inspectcode.log",
        "--no-build",
        "--settings=SK-dotnet.sln.DotSettings",
        "--format=Text",
        "SK-dotnet.sln"
      ],
      "options": {
        "cwd": "${workspaceFolder}/dotnet"
      }
    },
    {
      "label": "format (contributing-R#)",
      "command": "dotnet",
      "type": "process",
      "group": "build",
      "args": [
        "jb",
        "cleanupcode",
        "--no-build",
        "--verbosity=WARN",
        "--profile=Built-in: Reformat Code",
        "--settings=SK-dotnet.sln.DotSettings",
        "SK-dotnet.sln"
      ],
      "options": {
        "cwd": "${workspaceFolder}/dotnet"
      }
    },
    {
      "label": "validate - (contributing-Format-Build-Test-Run)",
      "detail": "Runs tasks to validate changes before checking in.",
      "group": "build",
      "dependsOn": [
        "R# cleanup",
        "build (Semantic-Kernel)",
        "test (Semantic-Kernel",
        "run (Kernel-Demo)"
      ],
      "dependsOrder": "sequence"
    },
    {
      "label": "build (Semantic-Kernel)",
      "command": "dotnet",
      "type": "process",
      "args": [
        "build",
        "${workspaceFolder}/dotnet/SK-dotnet.sln",
        "--configuration",
        "Release"
      ],
      "problemMatcher": "$msCompile",
      "group": "build",
      "presentation": {
        "reveal": "always",
        "panel": "shared",
        "group": "PR-Validate"
      }
    },
    {
      "label": "test (Semantic-Kernel)",
      "command": "dotnet",
      "type": "process",
      "args": [
        "test",
        "SemanticKernel.UnitTests.csproj"
      ],
      "problemMatcher": "$msCompile",
      "group": "test",
      "presentation": {
        "reveal": "always",
        "panel": "shared",
        "group": "PR-Validate"
      },
      "options": {
        "cwd": "${workspaceFolder}/dotnet/src/SemanticKernel.UnitTests/"
      }
    },
    {
      "label": "test (Semantic-Kernel (Code Coverage))",
      "command": "dotnet",
      "type": "process",
      "args": [
        "test",
        "--results-directory",
        "${workspaceFolder}/dotnet/TestResults/",
        "--collect",
        "XPlat Code Coverage;Format=lcov",
        "--filter",
        "${input:filter}",
        "SemanticKernel.UnitTests.csproj"
      ],
      "problemMatcher": "$msCompile",
      "group": "test",
      "presentation": {
        "reveal": "always",
        "panel": "shared"
      },
      "options": {
        "cwd": "${workspaceFolder}/dotnet/src/SemanticKernel.UnitTests/"
      }
    },
    {
      "label": "test (Extensions (Code Coverage))",
      "command": "dotnet",
      "type": "process",
      "args": [
        "test",
        "--results-directory",
        "${workspaceFolder}/dotnet/TestResults/",
        "--collect",
        "XPlat Code Coverage;Format=lcov",
        "--filter",
        "${input:filter}",
        "Extensions.UnitTests.csproj"
      ],
      "problemMatcher": "$msCompile",
      "group": "test",
      "presentation": {
        "reveal": "always",
        "panel": "shared"
      },
      "options": {
        "cwd": "${workspaceFolder}/dotnet/src/Extensions/Extensions.UnitTests/"
      }
    },
    {
      "label": "test (ALL (Code Coverage))",
      "command": "dotnet",
      "type": "process",
      "args": [
        "test",
        "--results-directory",
        "${workspaceFolder}/dotnet/TestResults/",
        "--collect",
        "XPlat Code Coverage;Format=lcov",
        "--filter",
        "${input:filter}"
      ],
      "problemMatcher": "$msCompile",
      "group": "test",
      "presentation": {
        "reveal": "always",
        "panel": "shared"
      },
      "options": {
        "cwd": "${workspaceFolder}/dotnet/"
      }
    },
    {
      "label": "test (Semantic-Kernel Integration (Code Coverage))",
      "command": "dotnet",
      "type": "process",
      "args": [
        "test",
        "--results-directory",
        "${workspaceFolder}/dotnet/TestResults/",
        "--collect",
        "XPlat Code Coverage;Format=lcov",
        "--filter",
        "${input:filter}",
        "IntegrationTests.csproj"
      ],
      "problemMatcher": "$msCompile",
      "group": "test",
      "presentation": {
        "reveal": "always",
        "panel": "shared"
      },
      "options": {
        "cwd": "${workspaceFolder}/dotnet/src/IntegrationTests/"
      }
    },
    {
      "label": "build (KernelSyntaxExamples)",
      "command": "dotnet",
      "type": "process",
      "args": [
        "build",
        "${workspaceFolder}/dotnet/samples/KernelSyntaxExamples/KernelSyntaxExamples.csproj",
        "/property:GenerateFullPaths=true",
        "/consoleloggerparameters:NoSummary",
        "/property:DebugType=portable"
      ],
      "problemMatcher": "$msCompile",
      "group": "build"
    },
    {
      "label": "watch (KernelSyntaxExamples)",
      "command": "dotnet",
      "type": "process",
      "args": [
        "watch",
        "run",
        "--project",
        "${workspaceFolder}/dotnet/samples/KernelSyntaxExamples/KernelSyntaxExamples.csproj"
      ],
      "problemMatcher": "$msCompile",
      "group": "build"
    },
    {
      "label": "run (KernelSyntaxExamples)",
      "command": "dotnet",
      "type": "process",
      "args": [
        "run",
        "--project",
        "${workspaceFolder}/dotnet/samples/KernelSyntaxExamples/KernelSyntaxExamples.csproj"
      ],
      "problemMatcher": "$msCompile",
      "group": "test",
      "presentation": {
        "reveal": "always",
        "panel": "shared",
        "group": "PR-Validate"
      }
    },
    {
      "label": "run (KernelHttpServer)",
      "command": "func",
      "type": "shell",
      "args": [
        "start",
        "--csharp"
      ],
      "group": "test",
      "options": {
        "cwd": "${workspaceFolder}/samples/dotnet/KernelHttpServer"
      },
      "presentation": {
        "reveal": "always",
        "panel": "shared",
        "group": "Run-Samples"
      }
    },
    {
      "label": "run (Starter Chat WebApp React)",
      "command": "yarn",
      "type": "shell",
      "args": [
        "start"
      ],
      "group": "test",
      "options": {
        "cwd": "${workspaceFolder}/samples/apps/chat-summary-webapp-react"
      },
      "presentation": {
        "reveal": "always",
        "panel": "shared",
        "group": "Run-Samples"
      }
    },
    {
      "label": "run (Book Creator WebApp React)",
      "command": "yarn",
      "type": "shell",
      "args": [
        "start"
      ],
      "group": "test",
      "options": {
        "cwd": "${workspaceFolder}/samples/apps/book-creator-webapp-react"
      },
      "presentation": {
        "reveal": "always",
        "panel": "shared",
        "group": "Run-Samples"
      }
    },
    {
      "label": "run (Auth API WebApp React)",
      "command": "yarn",
      "type": "shell",
      "args": [
        "start"
      ],
      "group": "test",
      "options": {
        "cwd": "${workspaceFolder}/samples/apps/auth-api-webapp-react"
      },
      "presentation": {
        "reveal": "always",
        "panel": "shared",
        "group": "Run-Samples"
      }
    },
    {
      "label": "clean (functions)",
      "command": "dotnet",
      "args": [
        "clean",
        "/property:GenerateFullPaths=true",
        "/consoleloggerparameters:NoSummary"
      ],
      "type": "process",
      "problemMatcher": "$msCompile",
      "options": {
        "cwd": "${workspaceFolder}/samples\\dotnet\\KernelHttpServer"
      }
    },
    {
      "label": "build (functions)",
      "command": "dotnet",
      "args": [
        "build",
        "/property:GenerateFullPaths=true",
        "/consoleloggerparameters:NoSummary"
      ],
      "type": "process",
      "dependsOn": "clean (functions)",
      "group": {
        "kind": "build",
        "isDefault": true
      },
      "problemMatcher": "$msCompile",
      "options": {
        "cwd": "${workspaceFolder}/samples\\dotnet\\KernelHttpServer"
      }
    },
    {
      "label": "clean release (functions)",
      "command": "dotnet",
      "args": [
        "clean",
        "--configuration",
        "Release",
        "/property:GenerateFullPaths=true",
        "/consoleloggerparameters:NoSummary"
      ],
      "type": "process",
      "problemMatcher": "$msCompile",
      "options": {
        "cwd": "${workspaceFolder}/samples\\dotnet\\KernelHttpServer"
      }
    },
    {
      "label": "publish (functions)",
      "command": "dotnet",
      "args": [
        "publish",
        "--configuration",
        "Release",
        "/property:GenerateFullPaths=true",
        "/consoleloggerparameters:NoSummary"
      ],
      "type": "process",
      "dependsOn": "clean release (functions)",
      "problemMatcher": "$msCompile",
      "options": {
        "cwd": "${workspaceFolder}/samples\\dotnet\\KernelHttpServer"
      }
    },
    {
      "type": "func",
      "dependsOn": "build (functions)",
      "options": {
        "cwd": "${workspaceFolder}/samples\\dotnet\\KernelHttpServer/bin/Debug/net6.0"
      },
      "command": "host start",
      "isBackground": true,
      "problemMatcher": "$func-dotnet-watch"
    }
  ],
  "inputs": [
    {
      "id": "filter",
      "type": "promptString",
      "default": "",
      "description": "Enter a filter for the tests"
    }
  ]
}
